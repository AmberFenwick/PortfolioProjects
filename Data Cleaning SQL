----------Populate Property Address data--------- before breaking out and deleting column

SELECT *
FROM PortfolioProject.dbo.Nashville_Housing
WHERE PropertyAddress is NULL
order by parcelID

SELECT A.ParcelID, A.PropertyAddress, B.ParcelID, B.PropertyAddress, ISNULL (A.PropertyAddress,B.PropertyAddress)
FROM PortfolioProject.dbo.Nashville_Housing A
JOIN  PortfolioProject.dbo.Nashville_Housing B
ON A.ParcelID = B.ParcelID
AND A.UniqueID <> B.UniqueID
WHERE A.PropertyAddress is NULL

UPDATE A
SET PropertyAddress = ISNULL (A.PropertyAddress,B.PropertyAddress)
FROM PortfolioProject.dbo.Nashville_Housing A
JOIN  PortfolioProject.dbo.Nashville_Housing B
ON A.ParcelID = B.ParcelID
AND A.UniqueID <> B.UniqueID
WHERE A.PropertyAddress is NULL

--Breaking Address into Individual Columns (Address, City, State)--------- substring charindex parsename and replace

SELECT PropertyAddress
FROM PortfolioProject.dbo.Nashville_Housing
WHERE PropertyAddress is NULL
order by parcelID

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress)) as Address
FROM PortfolioProject.dbo.Nashville_Housing

ALTER TABLE [Nashville_Housing]
ADD PropertySplitAddress Nvarchar(255);

UPDATE [Nashville_Housing ]
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1)

ALTER TABLE Nashville_Housing
ADD PropertySplitCity Nvarchar(255);

UPDATE [Nashville_Housing ]
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress))


SELECT OwnerAddress
FROM [Nashville_Housing ]



SELECT
PARSENAME (REPLACE(OwnerAddress, ',', '.'),3)
,PARSENAME (REPLACE(OwnerAddress, ',', '.'),2)
,PARSENAME (REPLACE(OwnerAddress, ',', '.'),1)
FROM PortfolioProject.dbo.Nashville_Housing


ALTER TABLE [Nashville_Housing]
ADD OwnerSplitAddress Nvarchar(255);

UPDATE [Nashville_Housing ]
SET OwnerSplitAddress = PARSENAME (REPLACE(OwnerAddress, ',', '.'),3)

ALTER TABLE Nashville_Housing
ADD OwnerSplitCity Nvarchar(255);

UPDATE [Nashville_Housing ]
SET OwnerSplitCity = PARSENAME (REPLACE(OwnerAddress, ',', '.'),2)

ALTER TABLE [Nashville_Housing]
ADD OwnerSplitState Nvarchar(255);

UPDATE [Nashville_Housing ]
SET OwnerSplitState = PARSENAME (REPLACE(OwnerAddress, ',', '.'),1)

-------- Change Y and N to Yes and No in "Sold as Vacant" field Using Case Statements-----------

SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM PortfolioProject.dbo.[Nashville_Housing ]
GROUP BY SoldAsVacant
ORDER BY 2

Select SoldAsVacant
,CASE When SoldAsVacant = 'Y' THEN 'Yes'
WHEN SoldAsVacant = 'N' THEN 'No'
ELSE SoldAsVacant
END
FROM PortfolioProject.dbo.[Nashville_Housing ]

UPDATE [Nashville_Housing ]
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
WHEN SoldAsVacant = 'N' THEN 'No'
ELSE SoldAsVacant
END



-------Remove Duplicates------------- using rownumber, CTE, and windows partition by
WITH RowNumCTE AS(
SELECT *, 
ROW_NUMBER() OVER (
    PARTITION BY ParcelID,
    PropertyAddress,
    SalePrice,
    SaleDate,
    LegalReference
    ORDER BY
    UniqueID
) Row_Num
FROM PortfolioProject.dbo.[Nashville_Housing ]
ORDER BY ParcelID
)
DELETE 
FROM RowNumCTE
WHERE Row_Num > 1
ORDER By PropertyAddress


--------DELETE Unused Columns---------- we no longer want to see/ dirty data of no use

SELECT*
FROM PortfolioProject.dbo.[Nashville_Housing ]

ALTER TABLE PortfolioProject.dbo.[Nashville_Housing ]
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress
